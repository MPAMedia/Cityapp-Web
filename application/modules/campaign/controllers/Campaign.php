<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Created by Console.
 * User: Droideve Technology
 * Date: {date}
 * Time: {time}
 */

class Campaign extends MY_Controller {

    public function __construct(){
        parent::__construct();

        $data = array(
            "version_code"  =>1,
            "version_name"  => "1.0.1 Beta",
            "order"     =>7
        );

        FModuleLoader::register($this,$data);

        TemplateManager::registerMenu(
            'campaign',
            "campaign/menu",
            4
        );


        define('PUSH_CAMPAIGNS','push_campaigns');
        define('EDIT_CAMPAIGN','edit');
        define('DELETE_CAMPAIGNS','delete');


        //Setup User Config
        define('KS_PUSH_CAMPAIGN_AUTO','push_campaign_auto');
        define('KS_NBR_CAMPAIGN_MONTHLY','nbr_campaigns_monthly');

        //load model
        $this->load->model("campaign/campaign_model","mCampaignModel");
        $this->load->model("notification/notification_model","mNotificationModel");


    }

    //call it after loading modules
    public function onLoaded()
    {
        parent::onLoaded(); // TODO: Change the autogenerated stub

        //Register Module Actions
        $this->registerModuleActions();


        $settings = array(
            array(
                'field_name' => KS_PUSH_CAMPAIGN_AUTO,
                'field_type' => UserSettingSubscribeTypes::BOOLEAN,
                'field_default_value' => true,
                'config_key' => 'PUSH_CAMPAIGN_AUTO',
                'field_label' => 'Push Auto Campaigns',
                'field_comment' => '',
            ),
            array(
                'field_name' => KS_NBR_CAMPAIGN_MONTHLY,
                'field_type' => UserSettingSubscribeTypes::INT,
                'field_default_value' => -1,
                'config_key' => 'NBR_CAMPAIGNS_MONTHLY',
                'field_label' => 'Campaigns allowed monthly',
                'field_sub_label' => '( -1 Unlimited )',
                'field_comment' => '',
            ),
        );

        UserSettingSubscribe::setGroup('campaign',$settings);





    }

    public function onCommitted()
    {
        if($this->mUserBrowser->isLogged() && GroupAccess::isGranted('campaign')){

            $this->load->helper('cms/charts');

            SimpleChart::add('campaign','chart_v1_home',function ($months){

                if(GroupAccess::isGranted('user',USER_ADMIN)){
                    return $this->mCampaignModel->getCampaignsAnalytics($months);
                }else{
                    return $this->mCampaignModel->getCampaignsAnalytics($months,$this->mUserBrowser->getData('id_user'));
                }

            });
        }
    }

    private function registerModuleActions(){


        GroupAccess::registerActions("campaign",array(
            PUSH_CAMPAIGNS,
            EDIT_CAMPAIGN,
            DELETE_CAMPAIGNS,
        ));

    }

    public function cron(){

        parent::cron();

        $this->load->model("campaign/campaign_model");
        $this->campaign_model->pushPendingCampaigns();
        echo "Cron executed!";

    }





}

/* End of file CampaignDB.php */