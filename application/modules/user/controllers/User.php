<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Created by Console.
 * User: Droideve Technology
 * Date: {date}
 * Time: {time}
 */

require_once FCPATH."/application/modules/user/libraries/recaptchalib.php";

class User extends MY_Controller {

    public function __construct(){
        //parent::__construct();
        $this->load->module('appcore');

        $data = array(
            "version_code"  =>1,
            "version_name"  => "1.0.1 Beta",
            "order"     =>5
        );

        FModuleLoader::register($this,$data);


        $this->load->model("user/group_access_model","mGroupAccessModel");
        $this->load->helper("user/group_access");
        $this->load->helper("user/user");

        //load model
        $this->load->model("user/user_model","mUserModel");
        $this->load->model("user/user_browser","mUserBrowser");


    }

    public function register()
    {

        $data = array(
            "version_code"  =>1,
            "version_name"  => "1.0.1 Beta",
            "order"     =>5
        );

        FModuleLoader::register($this,$data);
    }

    private function moduleSetup(){



        define('reCAPTCHA',FALSE);

        //ACTIONS
        define('ADD_USERS','add');
        define('EDIT_USER','edit');
        define('DELETE_USERS','delete');
        define('USER_SETTING','user_setting');
        define('MANAGE_GROUP_ACCESS','manage_group_access');
        define('ACCESSIBLE_DASHBOARD','accessible_dashboard');
        define('USER_ADMIN','user_admin');


        TemplateManager::registerMenu(
            'user',
            "user/menu",
            8
        );

        TemplateManager::registerMenuSetting(
            'user',
            "user/menu_setting",
            8
        );


    }

    //call it after loaded all main modules

    public function onLoaded()
    {
        parent::onLoaded(); // TODO: Change the autogenerated stub

        $this->moduleSetup();

        GroupAccess::registerActions("user",array(
            ADD_USERS,
            EDIT_USER,
            DELETE_USERS,
            USER_SETTING,
            ACCESSIBLE_DASHBOARD,
            MANAGE_GROUP_ACCESS,
            USER_ADMIN,
        ));

        if(!defined("DEFAULT_USER_GRPAC"))
            $this->mConfigModel->save('DEFAULT_USER_GRPAC',0);

        if(!defined("DEFAULT_USER_MOBILE_GRPAC"))
            $this->mConfigModel->save('DEFAULT_USER_MOBILE_GRPAC',0);


        UserSettingSubscribe::set('user',array(
            'field_name' => 'user_settings_package',
            'field_type' => UserSettingSubscribeTypes::TEXT,
            'field_default_value' => "",
            'config_key' => 'USER_SETTINGS_PACKAGE', //<= use default value from config
            '_display'   => 0
        ));

        UserSettingSubscribe::set('user',array(
            'field_name' => 'user_timezone',
            'field_type' => UserSettingSubscribeTypes::VARCHAR,
            'field_default_value' => "UTC",
            'config_key' => 'TIME_ZONE', //<= use default value from config
            '_display'   => 0
        ));


        UserSettingSubscribe::set('user',array(
            'field_name' => 'user_language',
            'field_type' => UserSettingSubscribeTypes::VARCHAR,
            'field_default_value' => "en",
            'config_key' => 'DEFAULT_LANG', //<= use default value from config if needed
            '_display'   => 0
        ));



    }

    public function onCommitted()
    {
        if(!class_exists('SimpleChart'))
            $this->load->helper('cms/charts');

        if($this->mUserBrowser->isLogged() && GroupAccess::isGranted('user',USER_ADMIN)){
            $this->load->helper('cms/charts');
            SimpleChart::add('user','chart_v1_home',function ($months){
                return $this->mUserModel->getUsersAnalytics($months);
            });
        }

    }

    public function index()
	{


	}

    public function userConfirm(){


        $token = $this->input->get("id");
        $uid = $this->mUserModel->mailVerification($token);

        if($uid>0){

            $user_data = $this->mUserModel->syncUser(
                array(
                    "user_id"=>$uid,
                )
            );

            $user_data = $user_data[Tags::RESULT];

            if(count($user_data)>0){
                $this->mUserBrowser->setID($user_data[0]['id_user']);
                $this->mUserBrowser->setUserData($user_data[0]);
            }

        }

        redirect(site_url("user/verifEmail"));
    }


    public function setupDefaultGroupAccess(){

        $this->mGroupAccessModel->setupDefaultGroupAccess();

    }


    //USER AUTH

    public function signup(){

        if(USER_REGISTRATION==FALSE){
            redirect(admin_url("login"));
            return;
        }

        $lang = $this->input->get("lang");

        if($lang!=""){
            Translate::changeSessionLang($lang);
            redirect('user/signup');
        }

        if($this->mUserBrowser->isLogged()){
            redirect(admin_url(""));
        }else{
            $this->load->view("backend/html/signup");
        }


    }


    public function login(){

        // $this->doUpdate();

        $lang = $this->input->get("lang");

        if($lang!=""){
            Translate::changeSessionLang($lang);
            redirect('user/login');
        }


        if($this->mUserBrowser->isLogged()){
            redirect(admin_url(""));
        }else
            $this->load->view("backend/html/login");

    }

    public function verifEmail()
    {
        $this->load->view("backend/html/verifEmail");
    }


    public function logout()
    {

        if($this->mUserBrowser->isLogged()){

            $this->mUserBrowser->LogOut();
            redirect("user/login");

        }else{
            redirect("user/login");
        }

    }


    public function fpassword(){

        $this->load->view("backend/html/fpassword");

    }

    public function rpassword(){

        $this->load->view("backend/html/rpassword");

    }

    public function onUpgrade()
    {
        // TODO: Implement onUpgrade() method.
        parent::onUpgrade();
        $this->mGroupAccessModel->createTableModuleActions();
        $this->mGroupAccessModel->createTableGroupAccess();
        $this->mGroupAccessModel->updateFields();

    }

    public function onInstall()
    {
        parent::onInstall(); // TODO: Change the autogenerated stub
        $this->mGroupAccessModel->createTableModuleActions();
        $this->mGroupAccessModel->createTableGroupAccess();
        $this->mGroupAccessModel->updateFields();

    }




}

/* End of file UserDB.php */