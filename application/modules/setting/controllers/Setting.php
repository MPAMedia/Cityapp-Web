<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Created by Console.
 * User: Droideve Technology
 * Date: {date}
 * Time: {time}
 */

class Setting extends MY_Controller {

    public function __construct(){
        parent::__construct();

        define('CHANGE_APP_SETTING','change_app_setting');
        define('MANAGE_CURRENCIES','manage_currencies');

        $data = array(
            "version_code"  =>1,
            "version_name"  => "1.0.1 Beta",
            "order"     =>20
        );

        FModuleLoader::register($this,$data);


        TemplateManager::registerMenu(
            'setting',
            "setting/menu",
            5
        );

        TemplateManager::registerMenuSetting(
            'setting',
            "setting/menu_setting",
            1
        );


        //load model
        $this->load->model("setting/setting_model","mSettingModel");
        $this->load->model("setting/config_model","mConfigModel");
        $this->load->model("setting/currency_model","mCurrencyModel");
        $this->load->model("setting/admin_model","mAdminModel");
        $this->load->model("user/user_model","mUserModel");
        $this->load->model("user/user_browser","mUserBrowser");

        $this->load->model("user/group_access_model","mGroupAccessModel");
        $this->load->helper("user/group_access");
        $this->load->helper("user/user");
        $this->load->helper("setting/settings");


        if(!defined('ON_UPDATING'))
            $this->checkUpdateIfNeeded();


    }


    public function onLoaded()
    {
        parent::onLoaded(); // TODO: Change the autogenerated stub


        $this->registerModuleActions();

    }

    private function registerModuleActions(){

        GroupAccess::registerActions("setting",array(
            CHANGE_APP_SETTING,
            MANAGE_CURRENCIES,
        ));

    }

	public function index()
	{

	}

	public function setupMomentJS(){
        $jslib_moment = TemplateManager::assets('setting','plugins/moment-timezone/moment.js');
        $jslib_moment_tz = TemplateManager::assets('setting','plugins/moment-timezone/moment-timezone.min.js');
        TemplateManager::addScriptLibs($jslib_moment);
        TemplateManager::addScriptLibs($jslib_moment_tz);
    }

	public function cron_exe(){

        $modules = FModuleLoader::loadCoreModules();

        if(!empty($modules)){

            foreach ($modules as $module){

                if(ModulesChecker::isRegistred($module)){
                    $class = $this->{$module};
                    if(method_exists($class,'cron')){
                        $result = file_get_contents(site_url($module.'/cron'));
                        echo "Execute => ".$module." cron <br>";
                        echo $result.'<br><br>';
                    }
                }

            }

        }

    }

    public function cron(){


    }


    public function language()
    {
        $lang = $this->input->get("lang");

        if($lang!=""){

            Translate::changeSessionLang($lang);

            if($this->mUserBrowser->isLogged()){
                $this->db->where('user_id',$this->mUserBrowser->getData('id_user'));
                $this->db->update('user_subscribe_setting',array(
                    'user_language' => $lang
                ));
            }

            redirect(admin_url());
        }

    }


    public function messagesToTranslate(){

        echo "You need navigate in the website to save all messages<br><br>";

        if(isset($_SESSION['toTranslate'])){
            foreach ($_SESSION['toTranslate'] as $key => $item) {
                echo $key.": $item<br>";
            }
        }

    }

    public function translate(){

        $uri = $this->uri->segment(3);

        if($this->mUserBrowser->isLogged()) {

            if($uri==""){

                $data['default_language'] = Translate::loadLanguageFromYmlToTranslate(
                    $this->input->get("language")
                );

                $this->load->view("backend/header",$data);
                $this->load->view("backend/application/translate");
                $this->load->view("backend/footer");

            }else if($uri=="android"){


            }

        }
    }

    public function currencies(){



        if($this->mUserBrowser->isLogged()) {

            /*
            *  CHECK USER PEMISSIONS
            */
            $authType = $this->mUserBrowser->getData("typeAuth");
            if($authType!="admin"){
                redirect(admin_url("error404"));
                return;
            }


            $params = file_get_contents("config/".PARAMS_FILE.".json");
            $params = json_decode($params,JSON_OBJECT_AS_ARRAY);
            $data['config'] = $params;

            $this->load->view("backend/header",$data);
            $this->load->view("backend/application/currency");
            $this->load->view("backend/footer");


        }
    }

    public function application(){

        if($this->mUserBrowser->isLogged()) {


            /*
             *  CHECK USER PEMISSIONS
             */
            $authType = $this->mUserBrowser->getData("typeAuth");

            if($authType!="admin" || ($this->mUserBrowser->getData("manager")==0 && DEMO==FALSE)){
                redirect(admin_url("error404"));
                return;
            }else{
                Checker::load();
            }

            $params = file_get_contents("config/".PARAMS_FILE.".json");
            $params = json_decode($params,JSON_OBJECT_AS_ARRAY);
            $data['config'] = $params;

            $this->load->view("backend/header",$data);
            $this->load->view("backend/application/config");
            $this->load->view("backend/footer");

        }
    }

    public function app_config_xml(){

        if($this->mUserBrowser->isLogged()) {

            /*
            *  CHECK USER PEMISSIONS
            */
            $authType = $this->mUserBrowser->getData("typeAuth");
            if($authType!="admin"){
                redirect(admin_url("error404"));
                return;
            }


            $this->load->view("backend/header");
            $this->load->view("backend/application/app_config_xml");
            $this->load->view("backend/footer");

        }
    }

    public function enableModules(){

        //enable modules
        $modules = FModuleLoader::loadCoreModules();
        foreach ($modules as $module){
            $this->db->where('module_name',$module);
            $this->db->update('modules',array(
                '_enabled' => 1
            ));
        }

    }

    public function app_init(){


        //get data from installer
        $data = $this->input->post("data");
        $data = base64_decode($data);
        $data = json_decode($data,JSON_OBJECT_AS_ARRAY);

       $this->enableModules();

        $login = $data['login'];
        $email = $data['email'];
        $password = $data['password'];
        $name = $data['name'];
        $timezone = $data['timezone'];

        //create super admin account
        $data = $this->mAdminModel->createDefaultAdmin($login,$password,$email,$name,$timezone);


        if($data==TRUE){
            echo json_encode(array(Tags::SUCCESS=>1));return;
        }else{
            echo json_encode(array(Tags::SUCCESS=>0));return;
        }


    }

    public function createTableConfig(){

        $this->mConfigModel->createConfigTable();

        echo json_encode(array(Tags::SUCCESS=>1));

    }


    public function emigrateAlConfigValues(){

        $this->mConfigModel->emigrateAlConfigValues();

        echo json_encode(array(Tags::SUCCESS=>1));

    }


    private function checkUpdateIfNeeded(){

        if(_APP_VERSION!=APP_VERSION){
            echo "Ready for: <B>".APP_VERSION."</B><br><br>";
            echo '<a href="'.base_url("update?id=".CRYPTO_KEY).'">Run the update</a>';
            die();
        }


    }


}

/* End of file SettingDB.php */